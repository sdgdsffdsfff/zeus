<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ctrip.zeus.dao.mapper.CertNewCertificateMapper">
  <resultMap id="BaseResultMap" type="com.ctrip.zeus.dao.entity.CertNewCertificate">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="expire_time" jdbcType="TIMESTAMP" property="expireTime" />
    <result column="issue_time" jdbcType="TIMESTAMP" property="issueTime" />
    <result column="DataChange_LastTime" jdbcType="TIMESTAMP" property="datachangeLasttime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.ctrip.zeus.dao.entity.CertNewCertificate">
    <result column="content" jdbcType="LONGVARBINARY" property="content" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, expire_time, issue_time, DataChange_LastTime
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.ctrip.zeus.dao.entity.CertNewCertificateExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from cert_new_certificate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="com.ctrip.zeus.dao.entity.CertNewCertificateExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from cert_new_certificate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <if test="example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from cert_new_certificate
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    <if test="example.rows != null">
      <if test="example.offset != null">
        limit ${example.offset}, ${example.rows}
      </if>
      <if test="example.offset == null">
        limit ${example.rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from cert_new_certificate
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from cert_new_certificate
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from cert_new_certificate
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.ctrip.zeus.dao.entity.CertNewCertificateExample">
    delete from cert_new_certificate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ctrip.zeus.dao.entity.CertNewCertificate">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into cert_new_certificate (expire_time, issue_time, DataChange_LastTime, 
      content)
    values (#{expireTime,jdbcType=TIMESTAMP}, #{issueTime,jdbcType=TIMESTAMP}, #{datachangeLasttime,jdbcType=TIMESTAMP}, 
      #{content,jdbcType=LONGVARBINARY})
  </insert>
  <insert id="insertSelective" parameterType="com.ctrip.zeus.dao.entity.CertNewCertificate">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into cert_new_certificate
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="expireTime != null">
        expire_time,
      </if>
      <if test="issueTime != null">
        issue_time,
      </if>
      <if test="datachangeLasttime != null">
        DataChange_LastTime,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="expireTime != null">
        #{expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="issueTime != null">
        #{issueTime,jdbcType=TIMESTAMP},
      </if>
      <if test="datachangeLasttime != null">
        #{datachangeLasttime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ctrip.zeus.dao.entity.CertNewCertificateExample" resultType="java.lang.Long">
    select count(*) from cert_new_certificate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update cert_new_certificate
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.expireTime != null">
        expire_time = #{record.expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.issueTime != null">
        issue_time = #{record.issueTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.datachangeLasttime != null">
        DataChange_LastTime = #{record.datachangeLasttime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=LONGVARBINARY},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update cert_new_certificate
    set id = #{record.id,jdbcType=BIGINT},
      expire_time = #{record.expireTime,jdbcType=TIMESTAMP},
      issue_time = #{record.issueTime,jdbcType=TIMESTAMP},
      DataChange_LastTime = #{record.datachangeLasttime,jdbcType=TIMESTAMP},
      content = #{record.content,jdbcType=LONGVARBINARY}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update cert_new_certificate
    set id = #{record.id,jdbcType=BIGINT},
      expire_time = #{record.expireTime,jdbcType=TIMESTAMP},
      issue_time = #{record.issueTime,jdbcType=TIMESTAMP},
      DataChange_LastTime = #{record.datachangeLasttime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ctrip.zeus.dao.entity.CertNewCertificate">
    update cert_new_certificate
    <set>
      <if test="expireTime != null">
        expire_time = #{expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="issueTime != null">
        issue_time = #{issueTime,jdbcType=TIMESTAMP},
      </if>
      <if test="datachangeLasttime != null">
        DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARBINARY},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.ctrip.zeus.dao.entity.CertNewCertificate">
    update cert_new_certificate
    set expire_time = #{expireTime,jdbcType=TIMESTAMP},
      issue_time = #{issueTime,jdbcType=TIMESTAMP},
      DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARBINARY}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ctrip.zeus.dao.entity.CertNewCertificate">
    update cert_new_certificate
    set expire_time = #{expireTime,jdbcType=TIMESTAMP},
      issue_time = #{issueTime,jdbcType=TIMESTAMP},
      DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectOneByExample" parameterType="com.ctrip.zeus.dao.entity.CertNewCertificateExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from cert_new_certificate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleWithBLOBs" parameterType="com.ctrip.zeus.dao.entity.CertNewCertificateExample" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from cert_new_certificate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from cert_new_certificate
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <insert id="upsertSelective" keyColumn="id" keyProperty="id" parameterType="com.ctrip.zeus.dao.entity.CertNewCertificate" useGeneratedKeys="true">
    insert into cert_new_certificate
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="expireTime != null">
        expire_time,
      </if>
      <if test="issueTime != null">
        issue_time,
      </if>
      <if test="datachangeLasttime != null">
        DataChange_LastTime,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="expireTime != null">
        #{expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="issueTime != null">
        #{issueTime,jdbcType=TIMESTAMP},
      </if>
      <if test="datachangeLasttime != null">
        #{datachangeLasttime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARBINARY},
      </if>
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      <if test="expireTime != null">
        expire_time = #{expireTime,jdbcType=TIMESTAMP},
      </if>
      <if test="issueTime != null">
        issue_time = #{issueTime,jdbcType=TIMESTAMP},
      </if>
      <if test="datachangeLasttime != null">
        DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <insert id="upsert" keyColumn="id" keyProperty="id" parameterType="com.ctrip.zeus.dao.entity.CertNewCertificate" useGeneratedKeys="true">
    insert into cert_new_certificate
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      expire_time,
      issue_time,
      DataChange_LastTime,
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      #{expireTime,jdbcType=TIMESTAMP},
      #{issueTime,jdbcType=TIMESTAMP},
      #{datachangeLasttime,jdbcType=TIMESTAMP},
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      expire_time = #{expireTime,jdbcType=TIMESTAMP},
      issue_time = #{issueTime,jdbcType=TIMESTAMP},
      DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
    </trim>
  </insert>
  <insert id="upsertWithBLOBs" keyColumn="id" keyProperty="id" parameterType="com.ctrip.zeus.dao.entity.CertNewCertificate" useGeneratedKeys="true">
    insert into cert_new_certificate
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      expire_time,
      issue_time,
      DataChange_LastTime,
      content,
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      #{expireTime,jdbcType=TIMESTAMP},
      #{issueTime,jdbcType=TIMESTAMP},
      #{datachangeLasttime,jdbcType=TIMESTAMP},
      #{content,jdbcType=LONGVARBINARY},
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      expire_time = #{expireTime,jdbcType=TIMESTAMP},
      issue_time = #{issueTime,jdbcType=TIMESTAMP},
      DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARBINARY},
    </trim>
  </insert>

  <!-- manually added -->
  <insert id="insertWithId" parameterType="com.ctrip.zeus.dao.entity.CertNewCertificate">
    insert into cert_new_certificate (id, expire_time, issue_time, DataChange_LastTime,
    content)
    values (#{id,jdbcType=BIGINT}, #{expireTime,jdbcType=TIMESTAMP}, #{issueTime,jdbcType=TIMESTAMP}, #{datachangeLasttime,jdbcType=TIMESTAMP},
    #{content,jdbcType=LONGVARBINARY})
  </insert>
  <!-- manually added -->
</mapper>