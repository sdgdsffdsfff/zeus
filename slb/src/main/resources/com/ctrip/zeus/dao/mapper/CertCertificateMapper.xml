<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ctrip.zeus.dao.mapper.CertCertificateMapper">
  <resultMap id="BaseResultMap" type="com.ctrip.zeus.dao.entity.CertCertificate">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="domain" jdbcType="VARCHAR" property="domain" />
    <result column="state" jdbcType="BIT" property="state" />
    <result column="version" jdbcType="INTEGER" property="version" />
    <result column="DataChange_LastTime" jdbcType="TIMESTAMP" property="datachangeLasttime" />
    <result column="cid" jdbcType="VARCHAR" property="cid" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.ctrip.zeus.dao.entity.CertCertificateWithBLOBs">
    <result column="cert" jdbcType="LONGVARBINARY" property="cert" />
    <result column="key" jdbcType="LONGVARBINARY" property="key" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, `domain`, `state`, version, DataChange_LastTime, cid
  </sql>
  <sql id="Blob_Column_List">
    cert, `key`
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.ctrip.zeus.dao.entity.CertCertificateExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from cert_certificate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="com.ctrip.zeus.dao.entity.CertCertificateExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from cert_certificate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <if test="example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from cert_certificate
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    <if test="example.rows != null">
      <if test="example.offset != null">
        limit ${example.offset}, ${example.rows}
      </if>
      <if test="example.offset == null">
        limit ${example.rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from cert_certificate
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from cert_certificate
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from cert_certificate
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.ctrip.zeus.dao.entity.CertCertificateExample">
    delete from cert_certificate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ctrip.zeus.dao.entity.CertCertificateWithBLOBs">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into cert_certificate (`domain`, `state`, version, 
      DataChange_LastTime, cid, cert, 
      `key`)
    values (#{domain,jdbcType=VARCHAR}, #{state,jdbcType=BIT}, #{version,jdbcType=INTEGER}, 
      #{datachangeLasttime,jdbcType=TIMESTAMP}, #{cid,jdbcType=VARCHAR}, #{cert,jdbcType=LONGVARBINARY}, 
      #{key,jdbcType=LONGVARBINARY})
  </insert>
  <insert id="insertSelective" parameterType="com.ctrip.zeus.dao.entity.CertCertificateWithBLOBs">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into cert_certificate
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="domain != null">
        `domain`,
      </if>
      <if test="state != null">
        `state`,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="datachangeLasttime != null">
        DataChange_LastTime,
      </if>
      <if test="cid != null">
        cid,
      </if>
      <if test="cert != null">
        cert,
      </if>
      <if test="key != null">
        `key`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="domain != null">
        #{domain,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=BIT},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
      <if test="datachangeLasttime != null">
        #{datachangeLasttime,jdbcType=TIMESTAMP},
      </if>
      <if test="cid != null">
        #{cid,jdbcType=VARCHAR},
      </if>
      <if test="cert != null">
        #{cert,jdbcType=LONGVARBINARY},
      </if>
      <if test="key != null">
        #{key,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ctrip.zeus.dao.entity.CertCertificateExample" resultType="java.lang.Long">
    select count(*) from cert_certificate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update cert_certificate
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.domain != null">
        `domain` = #{record.domain,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null">
        `state` = #{record.state,jdbcType=BIT},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=INTEGER},
      </if>
      <if test="record.datachangeLasttime != null">
        DataChange_LastTime = #{record.datachangeLasttime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.cid != null">
        cid = #{record.cid,jdbcType=VARCHAR},
      </if>
      <if test="record.cert != null">
        cert = #{record.cert,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.key != null">
        `key` = #{record.key,jdbcType=LONGVARBINARY},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update cert_certificate
    set id = #{record.id,jdbcType=BIGINT},
      `domain` = #{record.domain,jdbcType=VARCHAR},
      `state` = #{record.state,jdbcType=BIT},
      version = #{record.version,jdbcType=INTEGER},
      DataChange_LastTime = #{record.datachangeLasttime,jdbcType=TIMESTAMP},
      cid = #{record.cid,jdbcType=VARCHAR},
      cert = #{record.cert,jdbcType=LONGVARBINARY},
      `key` = #{record.key,jdbcType=LONGVARBINARY}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update cert_certificate
    set id = #{record.id,jdbcType=BIGINT},
      `domain` = #{record.domain,jdbcType=VARCHAR},
      `state` = #{record.state,jdbcType=BIT},
      version = #{record.version,jdbcType=INTEGER},
      DataChange_LastTime = #{record.datachangeLasttime,jdbcType=TIMESTAMP},
      cid = #{record.cid,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ctrip.zeus.dao.entity.CertCertificateWithBLOBs">
    update cert_certificate
    <set>
      <if test="domain != null">
        `domain` = #{domain,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        `state` = #{state,jdbcType=BIT},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="datachangeLasttime != null">
        DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
      </if>
      <if test="cid != null">
        cid = #{cid,jdbcType=VARCHAR},
      </if>
      <if test="cert != null">
        cert = #{cert,jdbcType=LONGVARBINARY},
      </if>
      <if test="key != null">
        `key` = #{key,jdbcType=LONGVARBINARY},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.ctrip.zeus.dao.entity.CertCertificateWithBLOBs">
    update cert_certificate
    set `domain` = #{domain,jdbcType=VARCHAR},
      `state` = #{state,jdbcType=BIT},
      version = #{version,jdbcType=INTEGER},
      DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
      cid = #{cid,jdbcType=VARCHAR},
      cert = #{cert,jdbcType=LONGVARBINARY},
      `key` = #{key,jdbcType=LONGVARBINARY}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ctrip.zeus.dao.entity.CertCertificate">
    update cert_certificate
    set `domain` = #{domain,jdbcType=VARCHAR},
      `state` = #{state,jdbcType=BIT},
      version = #{version,jdbcType=INTEGER},
      DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
      cid = #{cid,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectOneByExample" parameterType="com.ctrip.zeus.dao.entity.CertCertificateExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from cert_certificate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleWithBLOBs" parameterType="com.ctrip.zeus.dao.entity.CertCertificateExample" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from cert_certificate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from cert_certificate
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <insert id="upsertSelective" keyColumn="id" keyProperty="id" parameterType="com.ctrip.zeus.dao.entity.CertCertificateWithBLOBs" useGeneratedKeys="true">
    insert into cert_certificate
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="domain != null">
        `domain`,
      </if>
      <if test="state != null">
        `state`,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="datachangeLasttime != null">
        DataChange_LastTime,
      </if>
      <if test="cid != null">
        cid,
      </if>
      <if test="cert != null">
        cert,
      </if>
      <if test="key != null">
        `key`,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="domain != null">
        #{domain,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=BIT},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
      <if test="datachangeLasttime != null">
        #{datachangeLasttime,jdbcType=TIMESTAMP},
      </if>
      <if test="cid != null">
        #{cid,jdbcType=VARCHAR},
      </if>
      <if test="cert != null">
        #{cert,jdbcType=LONGVARBINARY},
      </if>
      <if test="key != null">
        #{key,jdbcType=LONGVARBINARY},
      </if>
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      <if test="domain != null">
        `domain` = #{domain,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        `state` = #{state,jdbcType=BIT},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="datachangeLasttime != null">
        DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
      </if>
      <if test="cid != null">
        cid = #{cid,jdbcType=VARCHAR},
      </if>
      <if test="cert != null">
        cert = #{cert,jdbcType=LONGVARBINARY},
      </if>
      <if test="key != null">
        `key` = #{key,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <insert id="upsert" keyColumn="id" keyProperty="id" parameterType="com.ctrip.zeus.dao.entity.CertCertificate" useGeneratedKeys="true">
    insert into cert_certificate
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      `domain`,
      `state`,
      version,
      DataChange_LastTime,
      cid,
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      #{domain,jdbcType=VARCHAR},
      #{state,jdbcType=BIT},
      #{version,jdbcType=INTEGER},
      #{datachangeLasttime,jdbcType=TIMESTAMP},
      #{cid,jdbcType=VARCHAR},
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      `domain` = #{domain,jdbcType=VARCHAR},
      `state` = #{state,jdbcType=BIT},
      version = #{version,jdbcType=INTEGER},
      DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
      cid = #{cid,jdbcType=VARCHAR},
    </trim>
  </insert>
  <insert id="upsertWithBLOBs" keyColumn="id" keyProperty="id" parameterType="com.ctrip.zeus.dao.entity.CertCertificateWithBLOBs" useGeneratedKeys="true">
    insert into cert_certificate
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      `domain`,
      `state`,
      version,
      DataChange_LastTime,
      cid,
      cert,
      `key`,
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      #{domain,jdbcType=VARCHAR},
      #{state,jdbcType=BIT},
      #{version,jdbcType=INTEGER},
      #{datachangeLasttime,jdbcType=TIMESTAMP},
      #{cid,jdbcType=VARCHAR},
      #{cert,jdbcType=LONGVARBINARY},
      #{key,jdbcType=LONGVARBINARY},
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      `domain` = #{domain,jdbcType=VARCHAR},
      `state` = #{state,jdbcType=BIT},
      version = #{version,jdbcType=INTEGER},
      DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
      cid = #{cid,jdbcType=VARCHAR},
      cert = #{cert,jdbcType=LONGVARBINARY},
      `key` = #{key,jdbcType=LONGVARBINARY},
    </trim>
  </insert>

  <!-- not generated automatically -->
  <update id="updateCidByMd5" parameterType="java.lang.String">
    update cert_certificate
    <set>
      <if test="cid != null">
        cid = #{cid,jdbcType=VARCHAR},
      </if>
    </set>
    where MD5(cert) = #{certMd5,jdbcType=VARCHAR}
  </update>
  <!-- not generated automatically -->

  <!-- not generated automatically -->
  <insert id="insertIdIncluded" parameterType="com.ctrip.zeus.dao.entity.CertCertificateWithBLOBs">
      insert into cert_certificate (`id`, domain, state, version,
      DataChange_LastTime, cid, cert,
      `key`)
      values (#{id,jdbcType=BIGINT}, #{domain,jdbcType=VARCHAR}, #{state,jdbcType=BIT}, #{version,jdbcType=INTEGER},
      #{datachangeLasttime,jdbcType=TIMESTAMP}, #{cid,jdbcType=VARCHAR}, #{cert,jdbcType=LONGVARBINARY},
      #{key,jdbcType=LONGVARBINARY})
  </insert>

  <insert id="batchInsertIdIncluded" parameterType="list">
     insert into cert_certificate (`id`, domain, state, version,
      DataChange_LastTime, cid, cert,
      `key`)
      <trim prefix="values ">
        <foreach collection="list" item="item" separator=",">
          (#{item.id,jdbcType=BIGINT}, #{item.domain,jdbcType=VARCHAR}, #{item.state,jdbcType=BIT}, #{item.version,jdbcType=INTEGER},
          #{item.datachangeLasttime,jdbcType=TIMESTAMP}, #{item.cid,jdbcType=VARCHAR}, #{item.cert,jdbcType=LONGVARBINARY},
          #{item.key,jdbcType=LONGVARBINARY})
        </foreach>
      </trim>
  </insert>
  <!-- not generated automatically -->
</mapper>