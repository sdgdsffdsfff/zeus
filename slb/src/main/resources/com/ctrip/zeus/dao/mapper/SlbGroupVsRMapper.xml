<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ctrip.zeus.dao.mapper.SlbGroupVsRMapper">
    <resultMap id="BaseResultMap" type="com.ctrip.zeus.dao.entity.SlbGroupVsR">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="group_id" jdbcType="BIGINT" property="groupId"/>
        <result column="vs_id" jdbcType="BIGINT" property="vsId"/>
        <result column="path" jdbcType="VARCHAR" property="path"/>
        <result column="priority" jdbcType="INTEGER" property="priority"/>
        <result column="group_version" jdbcType="INTEGER" property="groupVersion"/>
        <result column="DataChange_LastTime" jdbcType="TIMESTAMP" property="datachangeLasttime"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.ctrip.zeus.dao.entity.SlbGroupVsR">
        <result column="content" jdbcType="LONGVARBINARY" property="content"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, group_id, vs_id, path, priority, group_version, DataChange_LastTime
  </sql>
    <sql id="Blob_Column_List">
    content
  </sql>
    <select id="selectByExampleWithBLOBs" parameterType="com.ctrip.zeus.dao.entity.SlbGroupVsRExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from slb_group_vs_r
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="rows != null">
            <if test="offset != null">
                limit ${offset}, ${rows}
            </if>
            <if test="offset == null">
                limit ${rows}
            </if>
        </if>
    </select>
    <select id="selectByExample" parameterType="com.ctrip.zeus.dao.entity.SlbGroupVsRExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from slb_group_vs_r
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="rows != null">
            <if test="offset != null">
                limit ${offset}, ${rows}
            </if>
            <if test="offset == null">
                limit ${rows}
            </if>
        </if>
    </select>
    <select id="selectByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
        select
        <if test="example.distinct">
            distinct
        </if>
        <choose>
            <when test="selective != null and selective.length > 0">
                <foreach collection="selective" item="column" separator=",">
                    ${column.aliasedEscapedColumnName}
                </foreach>
            </when>
            <otherwise>
                <include refid="Base_Column_List"/>
                ,
                <include refid="Blob_Column_List"/>
            </otherwise>
        </choose>
        from slb_group_vs_r
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
        <if test="example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
        <if test="example.rows != null">
            <if test="example.offset != null">
                limit ${example.offset}, ${example.rows}
            </if>
            <if test="example.offset == null">
                limit ${example.rows}
            </if>
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from slb_group_vs_r
        where id = #{id,jdbcType=BIGINT}
    </select>
    <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="ResultMapWithBLOBs">
        select
        <choose>
            <when test="selective != null and selective.length > 0">
                <foreach collection="selective" item="column" separator=",">
                    ${column.aliasedEscapedColumnName}
                </foreach>
            </when>
            <otherwise>
                <include refid="Base_Column_List"/>
                ,
                <include refid="Blob_Column_List"/>
            </otherwise>
        </choose>
        from slb_group_vs_r
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from slb_group_vs_r
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <delete id="deleteByExample" parameterType="com.ctrip.zeus.dao.entity.SlbGroupVsRExample">
        delete from slb_group_vs_r
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.ctrip.zeus.dao.entity.SlbGroupVsR">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into slb_group_vs_r (group_id, vs_id, path,
        priority, group_version, DataChange_LastTime,
        content)
        values (#{groupId,jdbcType=BIGINT}, #{vsId,jdbcType=BIGINT}, #{path,jdbcType=VARCHAR},
        #{priority,jdbcType=INTEGER}, #{groupVersion,jdbcType=INTEGER}, #{datachangeLasttime,jdbcType=TIMESTAMP},
        #{content,jdbcType=LONGVARBINARY})
    </insert>
    <insert id="insertSelective" parameterType="com.ctrip.zeus.dao.entity.SlbGroupVsR">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into slb_group_vs_r
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="groupId != null">
                group_id,
            </if>
            <if test="vsId != null">
                vs_id,
            </if>
            <if test="path != null">
                path,
            </if>
            <if test="priority != null">
                priority,
            </if>
            <if test="groupVersion != null">
                group_version,
            </if>
            <if test="datachangeLasttime != null">
                DataChange_LastTime,
            </if>
            <if test="content != null">
                content,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="groupId != null">
                #{groupId,jdbcType=BIGINT},
            </if>
            <if test="vsId != null">
                #{vsId,jdbcType=BIGINT},
            </if>
            <if test="path != null">
                #{path,jdbcType=VARCHAR},
            </if>
            <if test="priority != null">
                #{priority,jdbcType=INTEGER},
            </if>
            <if test="groupVersion != null">
                #{groupVersion,jdbcType=INTEGER},
            </if>
            <if test="datachangeLasttime != null">
                #{datachangeLasttime,jdbcType=TIMESTAMP},
            </if>
            <if test="content != null">
                #{content,jdbcType=LONGVARBINARY},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.ctrip.zeus.dao.entity.SlbGroupVsRExample" resultType="java.lang.Long">
        select count(*) from slb_group_vs_r
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update slb_group_vs_r
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.groupId != null">
                group_id = #{record.groupId,jdbcType=BIGINT},
            </if>
            <if test="record.vsId != null">
                vs_id = #{record.vsId,jdbcType=BIGINT},
            </if>
            <if test="record.path != null">
                path = #{record.path,jdbcType=VARCHAR},
            </if>
            <if test="record.priority != null">
                priority = #{record.priority,jdbcType=INTEGER},
            </if>
            <if test="record.groupVersion != null">
                group_version = #{record.groupVersion,jdbcType=INTEGER},
            </if>
            <if test="record.datachangeLasttime != null">
                DataChange_LastTime = #{record.datachangeLasttime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.content != null">
                content = #{record.content,jdbcType=LONGVARBINARY},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update slb_group_vs_r
        set id = #{record.id,jdbcType=BIGINT},
        group_id = #{record.groupId,jdbcType=BIGINT},
        vs_id = #{record.vsId,jdbcType=BIGINT},
        path = #{record.path,jdbcType=VARCHAR},
        priority = #{record.priority,jdbcType=INTEGER},
        group_version = #{record.groupVersion,jdbcType=INTEGER},
        DataChange_LastTime = #{record.datachangeLasttime,jdbcType=TIMESTAMP},
        content = #{record.content,jdbcType=LONGVARBINARY}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update slb_group_vs_r
        set id = #{record.id,jdbcType=BIGINT},
        group_id = #{record.groupId,jdbcType=BIGINT},
        vs_id = #{record.vsId,jdbcType=BIGINT},
        path = #{record.path,jdbcType=VARCHAR},
        priority = #{record.priority,jdbcType=INTEGER},
        group_version = #{record.groupVersion,jdbcType=INTEGER},
        DataChange_LastTime = #{record.datachangeLasttime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.ctrip.zeus.dao.entity.SlbGroupVsR">
        update slb_group_vs_r
        <set>
            <if test="groupId != null">
                group_id = #{groupId,jdbcType=BIGINT},
            </if>
            <if test="vsId != null">
                vs_id = #{vsId,jdbcType=BIGINT},
            </if>
            <if test="path != null">
                path = #{path,jdbcType=VARCHAR},
            </if>
            <if test="priority != null">
                priority = #{priority,jdbcType=INTEGER},
            </if>
            <if test="groupVersion != null">
                group_version = #{groupVersion,jdbcType=INTEGER},
            </if>
            <if test="datachangeLasttime != null">
                DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=LONGVARBINARY},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.ctrip.zeus.dao.entity.SlbGroupVsR">
    update slb_group_vs_r
    set group_id = #{groupId,jdbcType=BIGINT},
      vs_id = #{vsId,jdbcType=BIGINT},
      path = #{path,jdbcType=VARCHAR},
      priority = #{priority,jdbcType=INTEGER},
      group_version = #{groupVersion,jdbcType=INTEGER},
      DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARBINARY}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <update id="updateByPrimaryKey" parameterType="com.ctrip.zeus.dao.entity.SlbGroupVsR">
    update slb_group_vs_r
    set group_id = #{groupId,jdbcType=BIGINT},
      vs_id = #{vsId,jdbcType=BIGINT},
      path = #{path,jdbcType=VARCHAR},
      priority = #{priority,jdbcType=INTEGER},
      group_version = #{groupVersion,jdbcType=INTEGER},
      DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <select id="selectOneByExample" parameterType="com.ctrip.zeus.dao.entity.SlbGroupVsRExample" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from slb_group_vs_r
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        limit 1
    </select>
    <select id="selectOneByExampleWithBLOBs" parameterType="com.ctrip.zeus.dao.entity.SlbGroupVsRExample"
            resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from slb_group_vs_r
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        limit 1
    </select>
    <select id="selectOneByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
        select
        <choose>
            <when test="selective != null and selective.length > 0">
                <foreach collection="selective" item="column" separator=",">
                    ${column.aliasedEscapedColumnName}
                </foreach>
            </when>
            <otherwise>
                <include refid="Base_Column_List"/>
                ,
                <include refid="Blob_Column_List"/>
            </otherwise>
        </choose>
        from slb_group_vs_r
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
        <if test="example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
        limit 1
    </select>
    <insert id="upsertSelective" keyColumn="id" keyProperty="id" parameterType="com.ctrip.zeus.dao.entity.SlbGroupVsR"
            useGeneratedKeys="true">
        insert into slb_group_vs_r
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="groupId != null">
                group_id,
            </if>
            <if test="vsId != null">
                vs_id,
            </if>
            <if test="path != null">
                path,
            </if>
            <if test="priority != null">
                priority,
            </if>
            <if test="groupVersion != null">
                group_version,
            </if>
            <if test="datachangeLasttime != null">
                DataChange_LastTime,
            </if>
            <if test="content != null">
                content,
            </if>
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="groupId != null">
                #{groupId,jdbcType=BIGINT},
            </if>
            <if test="vsId != null">
                #{vsId,jdbcType=BIGINT},
            </if>
            <if test="path != null">
                #{path,jdbcType=VARCHAR},
            </if>
            <if test="priority != null">
                #{priority,jdbcType=INTEGER},
            </if>
            <if test="groupVersion != null">
                #{groupVersion,jdbcType=INTEGER},
            </if>
            <if test="datachangeLasttime != null">
                #{datachangeLasttime,jdbcType=TIMESTAMP},
            </if>
            <if test="content != null">
                #{content,jdbcType=LONGVARBINARY},
            </if>
        </trim>
        on duplicate key update
        <trim suffixOverrides=",">
            <if test="id != null">
                id = #{id,jdbcType=BIGINT},
            </if>
            <if test="groupId != null">
                group_id = #{groupId,jdbcType=BIGINT},
            </if>
            <if test="vsId != null">
                vs_id = #{vsId,jdbcType=BIGINT},
            </if>
            <if test="path != null">
                path = #{path,jdbcType=VARCHAR},
            </if>
            <if test="priority != null">
                priority = #{priority,jdbcType=INTEGER},
            </if>
            <if test="groupVersion != null">
                group_version = #{groupVersion,jdbcType=INTEGER},
            </if>
            <if test="datachangeLasttime != null">
                DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=LONGVARBINARY},
            </if>
        </trim>
    </insert>
    <insert id="upsert" keyColumn="id" keyProperty="id" parameterType="com.ctrip.zeus.dao.entity.SlbGroupVsR"
            useGeneratedKeys="true">
        insert into slb_group_vs_r
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            group_id,
            vs_id,
            path,
            priority,
            group_version,
            DataChange_LastTime,
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            #{groupId,jdbcType=BIGINT},
            #{vsId,jdbcType=BIGINT},
            #{path,jdbcType=VARCHAR},
            #{priority,jdbcType=INTEGER},
            #{groupVersion,jdbcType=INTEGER},
            #{datachangeLasttime,jdbcType=TIMESTAMP},
        </trim>
        on duplicate key update
        <trim suffixOverrides=",">
            <if test="id != null">
                id = #{id,jdbcType=BIGINT},
            </if>
            group_id = #{groupId,jdbcType=BIGINT},
            vs_id = #{vsId,jdbcType=BIGINT},
            path = #{path,jdbcType=VARCHAR},
            priority = #{priority,jdbcType=INTEGER},
            group_version = #{groupVersion,jdbcType=INTEGER},
            DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
        </trim>
    </insert>
    <insert id="upsertWithBLOBs" keyColumn="id" keyProperty="id" parameterType="com.ctrip.zeus.dao.entity.SlbGroupVsR"
            useGeneratedKeys="true">
        insert into slb_group_vs_r
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            group_id,
            vs_id,
            path,
            priority,
            group_version,
            DataChange_LastTime,
            content,
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            #{groupId,jdbcType=BIGINT},
            #{vsId,jdbcType=BIGINT},
            #{path,jdbcType=VARCHAR},
            #{priority,jdbcType=INTEGER},
            #{groupVersion,jdbcType=INTEGER},
            #{datachangeLasttime,jdbcType=TIMESTAMP},
            #{content,jdbcType=LONGVARBINARY},
        </trim>
        on duplicate key update
        <trim suffixOverrides=",">
            <if test="id != null">
                id = #{id,jdbcType=BIGINT},
            </if>
            group_id = #{groupId,jdbcType=BIGINT},
            vs_id = #{vsId,jdbcType=BIGINT},
            path = #{path,jdbcType=VARCHAR},
            priority = #{priority,jdbcType=INTEGER},
            group_version = #{groupVersion,jdbcType=INTEGER},
            DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
            content = #{content,jdbcType=LONGVARBINARY},
        </trim>
    </insert>

    <!--Self defined-->
    <select id="findAllByGroupOfflineVersion" parameterType="list" resultMap="ResultMapWithBLOBs">
        select
        sgvr.id, sgvr.group_id, sgvr.vs_id, sgvr.path, sgvr.priority, sgvr.group_version, sgvr.content,
        sgvr.DataChange_LastTime
        from slb_group_vs_r as sgvr
        INNER JOIN slb_group_status_r as rgs
        ON sgvr.group_id = rgs.group_id
        AND sgvr.group_version = rgs.offline_version
        WHERE sgvr.group_id IN
        <foreach close=")" collection="list" item="item" open="("
                 separator=",">
            #{item}
        </foreach>
    </select>

    <update id="batchUpdate" parameterType="list">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update slb_group_vs_r
            <set>
                group_id = ${item.groupId},
                vs_id = ${item.vsId},
                group_version = ${item.groupVersion}
            </set>
            where id = ${item.id}
        </foreach>
    </update>

    <insert id="batchInsert" parameterType="list">
        insert into slb_group_vs_r (
        group_id,
        vs_id,
        path,
        priority,
        group_version,
        content)
        <trim prefix="values ">
            <foreach collection="list" item="item" separator=",">
                (#{item.groupId,jdbcType=BIGINT},
                #{item.vsId,jdbcType=BIGINT},
                #{item.path,jdbcType=VARCHAR},
                #{item.priority,jdbcType=INTEGER},
                #{item.groupVersion,jdbcType=INTEGER},
                #{item.content,jdbcType=LONGVARBINARY})
            </foreach>
        </trim>
    </insert>

    <insert id="batchInsertIncludeId" parameterType="list">
        insert into slb_group_vs_r (`id`,group_id, vs_id, path,
        priority, group_version, DataChange_LastTime,
        content)
        <trim prefix="values ">
            <foreach collection="list" item="item" separator=",">
                (#{item.id,jdbcType=BIGINT},#{item.groupId,jdbcType=BIGINT}, #{item.vsId,jdbcType=BIGINT},
                #{item.path,jdbcType=VARCHAR},
                #{item.priority,jdbcType=INTEGER}, #{item.groupVersion,jdbcType=INTEGER},
                #{item.datachangeLasttime,jdbcType=TIMESTAMP},
                #{item.content,jdbcType=LONGVARBINARY})
            </foreach>
        </trim>
    </insert>

    <delete id="batchDelete" parameterType="list">
        delete from slb_group_vs_r
        where id IN
        <foreach collection="list" index="index" item="item"
                 separator="," open="(" close=")">
            #{item.id,jdbcType=BIGINT}
        </foreach>
    </delete>

    <select id="concatSelect" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from slb_group_vs_r

        WHERE CONCAT_WS(',', group_id, vs_id, priority, path, group_version, content) in
        <foreach close=")" collection="concats" item="item" open="("
                 separator=",">
            #{item}
        </foreach>
    </select>

    <select id="findByVsesAndGroupOfflineVersion" parameterType="list" resultMap="ResultMapWithBLOBs">
        select
        sgvr.id, sgvr.group_id, sgvr.vs_id, sgvr.path, sgvr.priority, sgvr.group_version, sgvr.content,
        sgvr.DataChange_LastTime
        from slb_group_vs_r as sgvr
        INNER JOIN slb_group_status_r as rgs
        ON sgvr.group_id = rgs.group_id
        AND sgvr.group_version = rgs.offline_version
        WHERE sgvr.vs_id IN
        <foreach close=")" collection="ids" item="item" open="("
                 separator=",">
            #{item}
        </foreach>
    </select>
    <!--Self defined-->
</mapper>