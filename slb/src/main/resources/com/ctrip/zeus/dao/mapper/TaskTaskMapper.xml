<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ctrip.zeus.dao.mapper.TaskTaskMapper">
  <resultMap id="BaseResultMap" type="com.ctrip.zeus.dao.entity.TaskTask">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="ops_type" jdbcType="VARCHAR" property="opsType" />
    <result column="group_id" jdbcType="BIGINT" property="groupId" />
    <result column="policy_id" jdbcType="BIGINT" property="policyId" />
    <result column="slb_id" jdbcType="BIGINT" property="slbId" />
    <result column="slb_virtual_server_id" jdbcType="BIGINT" property="slbVirtualServerId" />
    <result column="ip_list" jdbcType="VARCHAR" property="ipList" />
    <result column="up" jdbcType="BIT" property="up" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="target_slb_id" jdbcType="BIGINT" property="targetSlbId" />
    <result column="resources" jdbcType="VARCHAR" property="resources" />
    <result column="version" jdbcType="INTEGER" property="version" />
    <result column="skip_validate" jdbcType="BIT" property="skipValidate" />
    <result column="fail_cause" jdbcType="VARCHAR" property="failCause" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="DataChange_LastTime" jdbcType="TIMESTAMP" property="datachangeLasttime" />
    <result column="dr_id" jdbcType="BIGINT" property="drId" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.ctrip.zeus.dao.entity.TaskTask">
    <result column="task_list" jdbcType="LONGVARBINARY" property="taskList" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, ops_type, group_id, policy_id, slb_id, slb_virtual_server_id, ip_list, up, `status`, 
    target_slb_id, resources, version, skip_validate, fail_cause, create_time, DataChange_LastTime, 
    dr_id
  </sql>
  <sql id="Blob_Column_List">
    task_list
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.ctrip.zeus.dao.entity.TaskTaskExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from task_task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExample" parameterType="com.ctrip.zeus.dao.entity.TaskTaskExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from task_task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <if test="example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from task_task
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    <if test="example.rows != null">
      <if test="example.offset != null">
        limit ${example.offset}, ${example.rows}
      </if>
      <if test="example.offset == null">
        limit ${example.rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from task_task
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from task_task
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from task_task
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.ctrip.zeus.dao.entity.TaskTaskExample">
    delete from task_task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ctrip.zeus.dao.entity.TaskTask">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into task_task (ops_type, group_id, policy_id, 
      slb_id, slb_virtual_server_id, ip_list, 
      up, `status`, target_slb_id, 
      resources, version, skip_validate, 
      fail_cause, create_time, DataChange_LastTime, 
      dr_id, task_list)
    values (#{opsType,jdbcType=VARCHAR}, #{groupId,jdbcType=BIGINT}, #{policyId,jdbcType=BIGINT}, 
      #{slbId,jdbcType=BIGINT}, #{slbVirtualServerId,jdbcType=BIGINT}, #{ipList,jdbcType=VARCHAR}, 
      #{up,jdbcType=BIT}, #{status,jdbcType=VARCHAR}, #{targetSlbId,jdbcType=BIGINT}, 
      #{resources,jdbcType=VARCHAR}, #{version,jdbcType=INTEGER}, #{skipValidate,jdbcType=BIT}, 
      #{failCause,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{datachangeLasttime,jdbcType=TIMESTAMP}, 
      #{drId,jdbcType=BIGINT}, #{taskList,jdbcType=LONGVARBINARY})
  </insert>
  <insert id="insertSelective" parameterType="com.ctrip.zeus.dao.entity.TaskTask">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into task_task
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="opsType != null">
        ops_type,
      </if>
      <if test="groupId != null">
        group_id,
      </if>
      <if test="policyId != null">
        policy_id,
      </if>
      <if test="slbId != null">
        slb_id,
      </if>
      <if test="slbVirtualServerId != null">
        slb_virtual_server_id,
      </if>
      <if test="ipList != null">
        ip_list,
      </if>
      <if test="up != null">
        up,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="targetSlbId != null">
        target_slb_id,
      </if>
      <if test="resources != null">
        resources,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="skipValidate != null">
        skip_validate,
      </if>
      <if test="failCause != null">
        fail_cause,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="datachangeLasttime != null">
        DataChange_LastTime,
      </if>
      <if test="drId != null">
        dr_id,
      </if>
      <if test="taskList != null">
        task_list,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="opsType != null">
        #{opsType,jdbcType=VARCHAR},
      </if>
      <if test="groupId != null">
        #{groupId,jdbcType=BIGINT},
      </if>
      <if test="policyId != null">
        #{policyId,jdbcType=BIGINT},
      </if>
      <if test="slbId != null">
        #{slbId,jdbcType=BIGINT},
      </if>
      <if test="slbVirtualServerId != null">
        #{slbVirtualServerId,jdbcType=BIGINT},
      </if>
      <if test="ipList != null">
        #{ipList,jdbcType=VARCHAR},
      </if>
      <if test="up != null">
        #{up,jdbcType=BIT},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="targetSlbId != null">
        #{targetSlbId,jdbcType=BIGINT},
      </if>
      <if test="resources != null">
        #{resources,jdbcType=VARCHAR},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
      <if test="skipValidate != null">
        #{skipValidate,jdbcType=BIT},
      </if>
      <if test="failCause != null">
        #{failCause,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="datachangeLasttime != null">
        #{datachangeLasttime,jdbcType=TIMESTAMP},
      </if>
      <if test="drId != null">
        #{drId,jdbcType=BIGINT},
      </if>
      <if test="taskList != null">
        #{taskList,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ctrip.zeus.dao.entity.TaskTaskExample" resultType="java.lang.Long">
    select count(*) from task_task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update task_task
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.opsType != null">
        ops_type = #{record.opsType,jdbcType=VARCHAR},
      </if>
      <if test="record.groupId != null">
        group_id = #{record.groupId,jdbcType=BIGINT},
      </if>
      <if test="record.policyId != null">
        policy_id = #{record.policyId,jdbcType=BIGINT},
      </if>
      <if test="record.slbId != null">
        slb_id = #{record.slbId,jdbcType=BIGINT},
      </if>
      <if test="record.slbVirtualServerId != null">
        slb_virtual_server_id = #{record.slbVirtualServerId,jdbcType=BIGINT},
      </if>
      <if test="record.ipList != null">
        ip_list = #{record.ipList,jdbcType=VARCHAR},
      </if>
      <if test="record.up != null">
        up = #{record.up,jdbcType=BIT},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.targetSlbId != null">
        target_slb_id = #{record.targetSlbId,jdbcType=BIGINT},
      </if>
      <if test="record.resources != null">
        resources = #{record.resources,jdbcType=VARCHAR},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=INTEGER},
      </if>
      <if test="record.skipValidate != null">
        skip_validate = #{record.skipValidate,jdbcType=BIT},
      </if>
      <if test="record.failCause != null">
        fail_cause = #{record.failCause,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.datachangeLasttime != null">
        DataChange_LastTime = #{record.datachangeLasttime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.drId != null">
        dr_id = #{record.drId,jdbcType=BIGINT},
      </if>
      <if test="record.taskList != null">
        task_list = #{record.taskList,jdbcType=LONGVARBINARY},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update task_task
    set id = #{record.id,jdbcType=BIGINT},
      ops_type = #{record.opsType,jdbcType=VARCHAR},
      group_id = #{record.groupId,jdbcType=BIGINT},
      policy_id = #{record.policyId,jdbcType=BIGINT},
      slb_id = #{record.slbId,jdbcType=BIGINT},
      slb_virtual_server_id = #{record.slbVirtualServerId,jdbcType=BIGINT},
      ip_list = #{record.ipList,jdbcType=VARCHAR},
      up = #{record.up,jdbcType=BIT},
      `status` = #{record.status,jdbcType=VARCHAR},
      target_slb_id = #{record.targetSlbId,jdbcType=BIGINT},
      resources = #{record.resources,jdbcType=VARCHAR},
      version = #{record.version,jdbcType=INTEGER},
      skip_validate = #{record.skipValidate,jdbcType=BIT},
      fail_cause = #{record.failCause,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      DataChange_LastTime = #{record.datachangeLasttime,jdbcType=TIMESTAMP},
      dr_id = #{record.drId,jdbcType=BIGINT},
      task_list = #{record.taskList,jdbcType=LONGVARBINARY}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update task_task
    set id = #{record.id,jdbcType=BIGINT},
      ops_type = #{record.opsType,jdbcType=VARCHAR},
      group_id = #{record.groupId,jdbcType=BIGINT},
      policy_id = #{record.policyId,jdbcType=BIGINT},
      slb_id = #{record.slbId,jdbcType=BIGINT},
      slb_virtual_server_id = #{record.slbVirtualServerId,jdbcType=BIGINT},
      ip_list = #{record.ipList,jdbcType=VARCHAR},
      up = #{record.up,jdbcType=BIT},
      `status` = #{record.status,jdbcType=VARCHAR},
      target_slb_id = #{record.targetSlbId,jdbcType=BIGINT},
      resources = #{record.resources,jdbcType=VARCHAR},
      version = #{record.version,jdbcType=INTEGER},
      skip_validate = #{record.skipValidate,jdbcType=BIT},
      fail_cause = #{record.failCause,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      DataChange_LastTime = #{record.datachangeLasttime,jdbcType=TIMESTAMP},
      dr_id = #{record.drId,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ctrip.zeus.dao.entity.TaskTask">
    update task_task
    <set>
      <if test="opsType != null">
        ops_type = #{opsType,jdbcType=VARCHAR},
      </if>
      <if test="groupId != null">
        group_id = #{groupId,jdbcType=BIGINT},
      </if>
      <if test="policyId != null">
        policy_id = #{policyId,jdbcType=BIGINT},
      </if>
      <if test="slbId != null">
        slb_id = #{slbId,jdbcType=BIGINT},
      </if>
      <if test="slbVirtualServerId != null">
        slb_virtual_server_id = #{slbVirtualServerId,jdbcType=BIGINT},
      </if>
      <if test="ipList != null">
        ip_list = #{ipList,jdbcType=VARCHAR},
      </if>
      <if test="up != null">
        up = #{up,jdbcType=BIT},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=VARCHAR},
      </if>
      <if test="targetSlbId != null">
        target_slb_id = #{targetSlbId,jdbcType=BIGINT},
      </if>
      <if test="resources != null">
        resources = #{resources,jdbcType=VARCHAR},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="skipValidate != null">
        skip_validate = #{skipValidate,jdbcType=BIT},
      </if>
      <if test="failCause != null">
        fail_cause = #{failCause,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="datachangeLasttime != null">
        DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
      </if>
      <if test="drId != null">
        dr_id = #{drId,jdbcType=BIGINT},
      </if>
      <if test="taskList != null">
        task_list = #{taskList,jdbcType=LONGVARBINARY},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.ctrip.zeus.dao.entity.TaskTask">
    update task_task
    set ops_type = #{opsType,jdbcType=VARCHAR},
      group_id = #{groupId,jdbcType=BIGINT},
      policy_id = #{policyId,jdbcType=BIGINT},
      slb_id = #{slbId,jdbcType=BIGINT},
      slb_virtual_server_id = #{slbVirtualServerId,jdbcType=BIGINT},
      ip_list = #{ipList,jdbcType=VARCHAR},
      up = #{up,jdbcType=BIT},
      `status` = #{status,jdbcType=VARCHAR},
      target_slb_id = #{targetSlbId,jdbcType=BIGINT},
      resources = #{resources,jdbcType=VARCHAR},
      version = #{version,jdbcType=INTEGER},
      skip_validate = #{skipValidate,jdbcType=BIT},
      fail_cause = #{failCause,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
      dr_id = #{drId,jdbcType=BIGINT},
      task_list = #{taskList,jdbcType=LONGVARBINARY}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ctrip.zeus.dao.entity.TaskTask">
    update task_task
    set ops_type = #{opsType,jdbcType=VARCHAR},
      group_id = #{groupId,jdbcType=BIGINT},
      policy_id = #{policyId,jdbcType=BIGINT},
      slb_id = #{slbId,jdbcType=BIGINT},
      slb_virtual_server_id = #{slbVirtualServerId,jdbcType=BIGINT},
      ip_list = #{ipList,jdbcType=VARCHAR},
      up = #{up,jdbcType=BIT},
      `status` = #{status,jdbcType=VARCHAR},
      target_slb_id = #{targetSlbId,jdbcType=BIGINT},
      resources = #{resources,jdbcType=VARCHAR},
      version = #{version,jdbcType=INTEGER},
      skip_validate = #{skipValidate,jdbcType=BIT},
      fail_cause = #{failCause,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
      dr_id = #{drId,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectOneByExample" parameterType="com.ctrip.zeus.dao.entity.TaskTaskExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from task_task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleWithBLOBs" parameterType="com.ctrip.zeus.dao.entity.TaskTaskExample" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from task_task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from task_task
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <insert id="upsertSelective" keyColumn="id" keyProperty="id" parameterType="com.ctrip.zeus.dao.entity.TaskTask" useGeneratedKeys="true">
    insert into task_task
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="opsType != null">
        ops_type,
      </if>
      <if test="groupId != null">
        group_id,
      </if>
      <if test="policyId != null">
        policy_id,
      </if>
      <if test="slbId != null">
        slb_id,
      </if>
      <if test="slbVirtualServerId != null">
        slb_virtual_server_id,
      </if>
      <if test="ipList != null">
        ip_list,
      </if>
      <if test="up != null">
        up,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="targetSlbId != null">
        target_slb_id,
      </if>
      <if test="resources != null">
        resources,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="skipValidate != null">
        skip_validate,
      </if>
      <if test="failCause != null">
        fail_cause,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="datachangeLasttime != null">
        DataChange_LastTime,
      </if>
      <if test="drId != null">
        dr_id,
      </if>
      <if test="taskList != null">
        task_list,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="opsType != null">
        #{opsType,jdbcType=VARCHAR},
      </if>
      <if test="groupId != null">
        #{groupId,jdbcType=BIGINT},
      </if>
      <if test="policyId != null">
        #{policyId,jdbcType=BIGINT},
      </if>
      <if test="slbId != null">
        #{slbId,jdbcType=BIGINT},
      </if>
      <if test="slbVirtualServerId != null">
        #{slbVirtualServerId,jdbcType=BIGINT},
      </if>
      <if test="ipList != null">
        #{ipList,jdbcType=VARCHAR},
      </if>
      <if test="up != null">
        #{up,jdbcType=BIT},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="targetSlbId != null">
        #{targetSlbId,jdbcType=BIGINT},
      </if>
      <if test="resources != null">
        #{resources,jdbcType=VARCHAR},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
      <if test="skipValidate != null">
        #{skipValidate,jdbcType=BIT},
      </if>
      <if test="failCause != null">
        #{failCause,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="datachangeLasttime != null">
        #{datachangeLasttime,jdbcType=TIMESTAMP},
      </if>
      <if test="drId != null">
        #{drId,jdbcType=BIGINT},
      </if>
      <if test="taskList != null">
        #{taskList,jdbcType=LONGVARBINARY},
      </if>
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      <if test="opsType != null">
        ops_type = #{opsType,jdbcType=VARCHAR},
      </if>
      <if test="groupId != null">
        group_id = #{groupId,jdbcType=BIGINT},
      </if>
      <if test="policyId != null">
        policy_id = #{policyId,jdbcType=BIGINT},
      </if>
      <if test="slbId != null">
        slb_id = #{slbId,jdbcType=BIGINT},
      </if>
      <if test="slbVirtualServerId != null">
        slb_virtual_server_id = #{slbVirtualServerId,jdbcType=BIGINT},
      </if>
      <if test="ipList != null">
        ip_list = #{ipList,jdbcType=VARCHAR},
      </if>
      <if test="up != null">
        up = #{up,jdbcType=BIT},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=VARCHAR},
      </if>
      <if test="targetSlbId != null">
        target_slb_id = #{targetSlbId,jdbcType=BIGINT},
      </if>
      <if test="resources != null">
        resources = #{resources,jdbcType=VARCHAR},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="skipValidate != null">
        skip_validate = #{skipValidate,jdbcType=BIT},
      </if>
      <if test="failCause != null">
        fail_cause = #{failCause,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="datachangeLasttime != null">
        DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
      </if>
      <if test="drId != null">
        dr_id = #{drId,jdbcType=BIGINT},
      </if>
      <if test="taskList != null">
        task_list = #{taskList,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <insert id="upsert" keyColumn="id" keyProperty="id" parameterType="com.ctrip.zeus.dao.entity.TaskTask" useGeneratedKeys="true">
    insert into task_task
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      ops_type,
      group_id,
      policy_id,
      slb_id,
      slb_virtual_server_id,
      ip_list,
      up,
      `status`,
      target_slb_id,
      resources,
      version,
      skip_validate,
      fail_cause,
      create_time,
      DataChange_LastTime,
      dr_id,
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      #{opsType,jdbcType=VARCHAR},
      #{groupId,jdbcType=BIGINT},
      #{policyId,jdbcType=BIGINT},
      #{slbId,jdbcType=BIGINT},
      #{slbVirtualServerId,jdbcType=BIGINT},
      #{ipList,jdbcType=VARCHAR},
      #{up,jdbcType=BIT},
      #{status,jdbcType=VARCHAR},
      #{targetSlbId,jdbcType=BIGINT},
      #{resources,jdbcType=VARCHAR},
      #{version,jdbcType=INTEGER},
      #{skipValidate,jdbcType=BIT},
      #{failCause,jdbcType=VARCHAR},
      #{createTime,jdbcType=TIMESTAMP},
      #{datachangeLasttime,jdbcType=TIMESTAMP},
      #{drId,jdbcType=BIGINT},
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      ops_type = #{opsType,jdbcType=VARCHAR},
      group_id = #{groupId,jdbcType=BIGINT},
      policy_id = #{policyId,jdbcType=BIGINT},
      slb_id = #{slbId,jdbcType=BIGINT},
      slb_virtual_server_id = #{slbVirtualServerId,jdbcType=BIGINT},
      ip_list = #{ipList,jdbcType=VARCHAR},
      up = #{up,jdbcType=BIT},
      `status` = #{status,jdbcType=VARCHAR},
      target_slb_id = #{targetSlbId,jdbcType=BIGINT},
      resources = #{resources,jdbcType=VARCHAR},
      version = #{version,jdbcType=INTEGER},
      skip_validate = #{skipValidate,jdbcType=BIT},
      fail_cause = #{failCause,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
      dr_id = #{drId,jdbcType=BIGINT},
    </trim>
  </insert>
  <insert id="upsertWithBLOBs" keyColumn="id" keyProperty="id" parameterType="com.ctrip.zeus.dao.entity.TaskTask" useGeneratedKeys="true">
    insert into task_task
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      ops_type,
      group_id,
      policy_id,
      slb_id,
      slb_virtual_server_id,
      ip_list,
      up,
      `status`,
      target_slb_id,
      resources,
      version,
      skip_validate,
      fail_cause,
      create_time,
      DataChange_LastTime,
      dr_id,
      task_list,
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      #{opsType,jdbcType=VARCHAR},
      #{groupId,jdbcType=BIGINT},
      #{policyId,jdbcType=BIGINT},
      #{slbId,jdbcType=BIGINT},
      #{slbVirtualServerId,jdbcType=BIGINT},
      #{ipList,jdbcType=VARCHAR},
      #{up,jdbcType=BIT},
      #{status,jdbcType=VARCHAR},
      #{targetSlbId,jdbcType=BIGINT},
      #{resources,jdbcType=VARCHAR},
      #{version,jdbcType=INTEGER},
      #{skipValidate,jdbcType=BIT},
      #{failCause,jdbcType=VARCHAR},
      #{createTime,jdbcType=TIMESTAMP},
      #{datachangeLasttime,jdbcType=TIMESTAMP},
      #{drId,jdbcType=BIGINT},
      #{taskList,jdbcType=LONGVARBINARY},
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      ops_type = #{opsType,jdbcType=VARCHAR},
      group_id = #{groupId,jdbcType=BIGINT},
      policy_id = #{policyId,jdbcType=BIGINT},
      slb_id = #{slbId,jdbcType=BIGINT},
      slb_virtual_server_id = #{slbVirtualServerId,jdbcType=BIGINT},
      ip_list = #{ipList,jdbcType=VARCHAR},
      up = #{up,jdbcType=BIT},
      `status` = #{status,jdbcType=VARCHAR},
      target_slb_id = #{targetSlbId,jdbcType=BIGINT},
      resources = #{resources,jdbcType=VARCHAR},
      version = #{version,jdbcType=INTEGER},
      skip_validate = #{skipValidate,jdbcType=BIT},
      fail_cause = #{failCause,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
      dr_id = #{drId,jdbcType=BIGINT},
      task_list = #{taskList,jdbcType=LONGVARBINARY},
    </trim>
  </insert>

  <!-- method added manually start -->
  <insert id="insertIdIncluded" parameterType="com.ctrip.zeus.dao.entity.TaskTask">
    insert into task_task (id, ops_type, group_id, policy_id,
    slb_id, slb_virtual_server_id, ip_list,
    up, status, target_slb_id,
    resources, version, skip_validate,
    fail_cause, create_time, DataChange_LastTime,
    dr_id, task_list)
    values (#{id, jdbcType=BIGINT}, #{opsType,jdbcType=VARCHAR}, #{groupId,jdbcType=BIGINT}, #{policyId,jdbcType=BIGINT},
    #{slbId,jdbcType=BIGINT}, #{slbVirtualServerId,jdbcType=BIGINT}, #{ipList,jdbcType=VARCHAR},
    #{up,jdbcType=BIT}, #{status,jdbcType=VARCHAR}, #{targetSlbId,jdbcType=BIGINT},
    #{resources,jdbcType=VARCHAR}, #{version,jdbcType=INTEGER}, #{skipValidate,jdbcType=BIT},
    #{failCause,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{datachangeLasttime,jdbcType=TIMESTAMP},
    #{drId,jdbcType=BIGINT}, #{taskList,jdbcType=LONGVARBINARY})
  </insert>
  <!-- method added manually end -->
</mapper>