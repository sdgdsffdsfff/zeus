<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ctrip.zeus.dao.mapper.SlbBuildCommitMapper">
    <resultMap id="BaseResultMap" type="com.ctrip.zeus.dao.entity.SlbBuildCommit">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="version" jdbcType="BIGINT" property="version"/>
        <result column="slb_id" jdbcType="BIGINT" property="slbId"/>
        <result column="vs_ids" jdbcType="VARCHAR" property="vsIds"/>
        <result column="group_ids" jdbcType="VARCHAR" property="groupIds"/>
        <result column="task_ids" jdbcType="VARCHAR" property="taskIds"/>
        <result column="cleanvs_ids" jdbcType="VARCHAR" property="cleanvsIds"/>
        <result column="type" jdbcType="VARCHAR" property="type"/>
        <result column="DataChange_LastTime" jdbcType="TIMESTAMP" property="datachangeLasttime"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, version, slb_id, vs_ids, group_ids, task_ids, cleanvs_ids, type, DataChange_LastTime
  </sql>
    <select id="selectByExample" parameterType="com.ctrip.zeus.dao.entity.SlbBuildCommitExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from slb_build_commit
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="rows != null">
            <if test="offset != null">
                limit ${offset}, ${rows}
            </if>
            <if test="offset == null">
                limit ${rows}
            </if>
        </if>
    </select>
    <select id="selectByExampleSelective" parameterType="map" resultMap="BaseResultMap">
        select
        <if test="example.distinct">
            distinct
        </if>
        <choose>
            <when test="selective != null and selective.length > 0">
                <foreach collection="selective" item="column" separator=",">
                    ${column.aliasedEscapedColumnName}
                </foreach>
            </when>
            <otherwise>
                <include refid="Base_Column_List"/>
            </otherwise>
        </choose>
        from slb_build_commit
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
        <if test="example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
        <if test="example.rows != null">
            <if test="example.offset != null">
                limit ${example.offset}, ${example.rows}
            </if>
            <if test="example.offset == null">
                limit ${example.rows}
            </if>
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from slb_build_commit
        where id = #{id,jdbcType=BIGINT}
    </select>
    <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="BaseResultMap">
        select
        <choose>
            <when test="selective != null and selective.length > 0">
                <foreach collection="selective" item="column" separator=",">
                    ${column.aliasedEscapedColumnName}
                </foreach>
            </when>
            <otherwise>
                <include refid="Base_Column_List"/>
            </otherwise>
        </choose>
        from slb_build_commit
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from slb_build_commit
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <delete id="deleteByExample" parameterType="com.ctrip.zeus.dao.entity.SlbBuildCommitExample">
        delete from slb_build_commit
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.ctrip.zeus.dao.entity.SlbBuildCommit">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into slb_build_commit (version, slb_id, vs_ids,
        group_ids, task_ids, cleanvs_ids,
        type, DataChange_LastTime)
        values (#{version,jdbcType=BIGINT}, #{slbId,jdbcType=BIGINT}, #{vsIds,jdbcType=VARCHAR},
        #{groupIds,jdbcType=VARCHAR}, #{taskIds,jdbcType=VARCHAR}, #{cleanvsIds,jdbcType=VARCHAR},
        #{type,jdbcType=VARCHAR}, #{datachangeLasttime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="com.ctrip.zeus.dao.entity.SlbBuildCommit">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into slb_build_commit
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="version != null">
                version,
            </if>
            <if test="slbId != null">
                slb_id,
            </if>
            <if test="vsIds != null">
                vs_ids,
            </if>
            <if test="groupIds != null">
                group_ids,
            </if>
            <if test="taskIds != null">
                task_ids,
            </if>
            <if test="cleanvsIds != null">
                cleanvs_ids,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="datachangeLasttime != null">
                DataChange_LastTime,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="version != null">
                #{version,jdbcType=BIGINT},
            </if>
            <if test="slbId != null">
                #{slbId,jdbcType=BIGINT},
            </if>
            <if test="vsIds != null">
                #{vsIds,jdbcType=VARCHAR},
            </if>
            <if test="groupIds != null">
                #{groupIds,jdbcType=VARCHAR},
            </if>
            <if test="taskIds != null">
                #{taskIds,jdbcType=VARCHAR},
            </if>
            <if test="cleanvsIds != null">
                #{cleanvsIds,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=VARCHAR},
            </if>
            <if test="datachangeLasttime != null">
                #{datachangeLasttime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.ctrip.zeus.dao.entity.SlbBuildCommitExample" resultType="java.lang.Long">
        select count(*) from slb_build_commit
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update slb_build_commit
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.version != null">
                version = #{record.version,jdbcType=BIGINT},
            </if>
            <if test="record.slbId != null">
                slb_id = #{record.slbId,jdbcType=BIGINT},
            </if>
            <if test="record.vsIds != null">
                vs_ids = #{record.vsIds,jdbcType=VARCHAR},
            </if>
            <if test="record.groupIds != null">
                group_ids = #{record.groupIds,jdbcType=VARCHAR},
            </if>
            <if test="record.taskIds != null">
                task_ids = #{record.taskIds,jdbcType=VARCHAR},
            </if>
            <if test="record.cleanvsIds != null">
                cleanvs_ids = #{record.cleanvsIds,jdbcType=VARCHAR},
            </if>
            <if test="record.type != null">
                type = #{record.type,jdbcType=VARCHAR},
            </if>
            <if test="record.datachangeLasttime != null">
                DataChange_LastTime = #{record.datachangeLasttime,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update slb_build_commit
        set id = #{record.id,jdbcType=BIGINT},
        version = #{record.version,jdbcType=BIGINT},
        slb_id = #{record.slbId,jdbcType=BIGINT},
        vs_ids = #{record.vsIds,jdbcType=VARCHAR},
        group_ids = #{record.groupIds,jdbcType=VARCHAR},
        task_ids = #{record.taskIds,jdbcType=VARCHAR},
        cleanvs_ids = #{record.cleanvsIds,jdbcType=VARCHAR},
        type = #{record.type,jdbcType=VARCHAR},
        DataChange_LastTime = #{record.datachangeLasttime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.ctrip.zeus.dao.entity.SlbBuildCommit">
        update slb_build_commit
        <set>
            <if test="version != null">
                version = #{version,jdbcType=BIGINT},
            </if>
            <if test="slbId != null">
                slb_id = #{slbId,jdbcType=BIGINT},
            </if>
            <if test="vsIds != null">
                vs_ids = #{vsIds,jdbcType=VARCHAR},
            </if>
            <if test="groupIds != null">
                group_ids = #{groupIds,jdbcType=VARCHAR},
            </if>
            <if test="taskIds != null">
                task_ids = #{taskIds,jdbcType=VARCHAR},
            </if>
            <if test="cleanvsIds != null">
                cleanvs_ids = #{cleanvsIds,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=VARCHAR},
            </if>
            <if test="datachangeLasttime != null">
                DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.ctrip.zeus.dao.entity.SlbBuildCommit">
    update slb_build_commit
    set version = #{version,jdbcType=BIGINT},
      slb_id = #{slbId,jdbcType=BIGINT},
      vs_ids = #{vsIds,jdbcType=VARCHAR},
      group_ids = #{groupIds,jdbcType=VARCHAR},
      task_ids = #{taskIds,jdbcType=VARCHAR},
      cleanvs_ids = #{cleanvsIds,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <select id="selectOneByExample" parameterType="com.ctrip.zeus.dao.entity.SlbBuildCommitExample"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from slb_build_commit
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        limit 1
    </select>
    <select id="selectOneByExampleSelective" parameterType="map" resultMap="BaseResultMap">
        select
        <choose>
            <when test="selective != null and selective.length > 0">
                <foreach collection="selective" item="column" separator=",">
                    ${column.aliasedEscapedColumnName}
                </foreach>
            </when>
            <otherwise>
                <include refid="Base_Column_List"/>
            </otherwise>
        </choose>
        from slb_build_commit
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
        <if test="example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
        limit 1
    </select>
    <insert id="upsertSelective" keyColumn="id" keyProperty="id" parameterType="com.ctrip.zeus.dao.entity.SlbBuildCommit"
            useGeneratedKeys="true">
        insert into slb_build_commit
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="version != null">
                version,
            </if>
            <if test="slbId != null">
                slb_id,
            </if>
            <if test="vsIds != null">
                vs_ids,
            </if>
            <if test="groupIds != null">
                group_ids,
            </if>
            <if test="taskIds != null">
                task_ids,
            </if>
            <if test="cleanvsIds != null">
                cleanvs_ids,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="datachangeLasttime != null">
                DataChange_LastTime,
            </if>
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="version != null">
                #{version,jdbcType=BIGINT},
            </if>
            <if test="slbId != null">
                #{slbId,jdbcType=BIGINT},
            </if>
            <if test="vsIds != null">
                #{vsIds,jdbcType=VARCHAR},
            </if>
            <if test="groupIds != null">
                #{groupIds,jdbcType=VARCHAR},
            </if>
            <if test="taskIds != null">
                #{taskIds,jdbcType=VARCHAR},
            </if>
            <if test="cleanvsIds != null">
                #{cleanvsIds,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=VARCHAR},
            </if>
            <if test="datachangeLasttime != null">
                #{datachangeLasttime,jdbcType=TIMESTAMP},
            </if>
        </trim>
        on duplicate key update
        <trim suffixOverrides=",">
            <if test="id != null">
                id = #{id,jdbcType=BIGINT},
            </if>
            <if test="version != null">
                version = #{version,jdbcType=BIGINT},
            </if>
            <if test="slbId != null">
                slb_id = #{slbId,jdbcType=BIGINT},
            </if>
            <if test="vsIds != null">
                vs_ids = #{vsIds,jdbcType=VARCHAR},
            </if>
            <if test="groupIds != null">
                group_ids = #{groupIds,jdbcType=VARCHAR},
            </if>
            <if test="taskIds != null">
                task_ids = #{taskIds,jdbcType=VARCHAR},
            </if>
            <if test="cleanvsIds != null">
                cleanvs_ids = #{cleanvsIds,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=VARCHAR},
            </if>
            <if test="datachangeLasttime != null">
                DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <insert id="upsert" keyColumn="id" keyProperty="id" parameterType="com.ctrip.zeus.dao.entity.SlbBuildCommit"
            useGeneratedKeys="true">
        insert into slb_build_commit
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            version,
            slb_id,
            vs_ids,
            group_ids,
            task_ids,
            cleanvs_ids,
            type,
            DataChange_LastTime,
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            #{version,jdbcType=BIGINT},
            #{slbId,jdbcType=BIGINT},
            #{vsIds,jdbcType=VARCHAR},
            #{groupIds,jdbcType=VARCHAR},
            #{taskIds,jdbcType=VARCHAR},
            #{cleanvsIds,jdbcType=VARCHAR},
            #{type,jdbcType=VARCHAR},
            #{datachangeLasttime,jdbcType=TIMESTAMP},
        </trim>
        on duplicate key update
        <trim suffixOverrides=",">
            <if test="id != null">
                id = #{id,jdbcType=BIGINT},
            </if>
            version = #{version,jdbcType=BIGINT},
            slb_id = #{slbId,jdbcType=BIGINT},
            vs_ids = #{vsIds,jdbcType=VARCHAR},
            group_ids = #{groupIds,jdbcType=VARCHAR},
            task_ids = #{taskIds,jdbcType=VARCHAR},
            cleanvs_ids = #{cleanvsIds,jdbcType=VARCHAR},
            type = #{type,jdbcType=VARCHAR},
            DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
        </trim>
    </insert>

    <!--Self Defined-->
    <insert id="batchInsertIncludeId" parameterType="list">

        insert into slb_build_commit (id, version, slb_id, vs_ids,
        group_ids, task_ids, cleanvs_ids,
        type, DataChange_LastTime)

        <trim prefix="values ">
            <foreach collection="list" item="item" separator=",">
                (#{item.id,jdbcType=BIGINT},
                #{item.version,jdbcType=BIGINT},
                #{item.slbId,jdbcType=BIGINT},
                #{item.vsIds,jdbcType=VARCHAR},
                #{item.groupIds,jdbcType=VARCHAR},
                #{item.taskIds,jdbcType=VARCHAR},
                #{item.cleanvsIds,jdbcType=VARCHAR},
                #{item.type,jdbcType=VARCHAR},
                #{item.datachangeLasttime,jdbcType=TIMESTAMP})
            </foreach>
        </trim>
    </insert>

    <insert id="insertIncludeId" parameterType="com.ctrip.zeus.dao.entity.SlbBuildCommit">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into slb_build_commit (`id`,version, slb_id, vs_ids,
        group_ids, task_ids, cleanvs_ids,
        type, DataChange_LastTime)
        values (#{id,jdbcType=BIGINT}, #{version,jdbcType=BIGINT}, #{slbId,jdbcType=BIGINT}, #{vsIds,jdbcType=VARCHAR},
        #{groupIds,jdbcType=VARCHAR}, #{taskIds,jdbcType=VARCHAR}, #{cleanvsIds,jdbcType=VARCHAR},
        #{type,jdbcType=VARCHAR}, #{datachangeLasttime,jdbcType=TIMESTAMP})
    </insert>
    <!--Self Defined-->
</mapper>