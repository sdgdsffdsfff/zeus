<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ctrip.zeus.dao.mapper.SlbGroupServerStatusMapper">
    <resultMap id="BaseResultMap" type="com.ctrip.zeus.dao.entity.SlbGroupServerStatus">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="group_id" jdbcType="BIGINT" property="groupId"/>
        <result column="ip" jdbcType="VARCHAR" property="ip"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="created_time" jdbcType="TIMESTAMP" property="createdTime"/>
        <result column="DataChange_LastTime" jdbcType="TIMESTAMP" property="datachangeLasttime"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, group_id, ip, status, created_time, DataChange_LastTime
  </sql>
    <select id="selectByExample" parameterType="com.ctrip.zeus.dao.entity.SlbGroupServerStatusExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from slb_group_server_status
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="rows != null">
            <if test="offset != null">
                limit ${offset}, ${rows}
            </if>
            <if test="offset == null">
                limit ${rows}
            </if>
        </if>
    </select>
    <select id="selectByExampleSelective" parameterType="map" resultMap="BaseResultMap">
        select
        <if test="example.distinct">
            distinct
        </if>
        <choose>
            <when test="selective != null and selective.length > 0">
                <foreach collection="selective" item="column" separator=",">
                    ${column.aliasedEscapedColumnName}
                </foreach>
            </when>
            <otherwise>
                <include refid="Base_Column_List"/>
            </otherwise>
        </choose>
        from slb_group_server_status
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
        <if test="example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
        <if test="example.rows != null">
            <if test="example.offset != null">
                limit ${example.offset}, ${example.rows}
            </if>
            <if test="example.offset == null">
                limit ${example.rows}
            </if>
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from slb_group_server_status
        where id = #{id,jdbcType=BIGINT}
    </select>
    <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="BaseResultMap">
        select
        <choose>
            <when test="selective != null and selective.length > 0">
                <foreach collection="selective" item="column" separator=",">
                    ${column.aliasedEscapedColumnName}
                </foreach>
            </when>
            <otherwise>
                <include refid="Base_Column_List"/>
            </otherwise>
        </choose>
        from slb_group_server_status
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from slb_group_server_status
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <delete id="deleteByExample" parameterType="com.ctrip.zeus.dao.entity.SlbGroupServerStatusExample">
        delete from slb_group_server_status
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.ctrip.zeus.dao.entity.SlbGroupServerStatus">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into slb_group_server_status (group_id, ip, status,
        created_time, DataChange_LastTime)
        values (#{groupId,jdbcType=BIGINT}, #{ip,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER},
        #{createdTime,jdbcType=TIMESTAMP}, #{datachangeLasttime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="com.ctrip.zeus.dao.entity.SlbGroupServerStatus">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into slb_group_server_status
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="groupId != null">
                group_id,
            </if>
            <if test="ip != null">
                ip,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="createdTime != null">
                created_time,
            </if>
            <if test="datachangeLasttime != null">
                DataChange_LastTime,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="groupId != null">
                #{groupId,jdbcType=BIGINT},
            </if>
            <if test="ip != null">
                #{ip,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="createdTime != null">
                #{createdTime,jdbcType=TIMESTAMP},
            </if>
            <if test="datachangeLasttime != null">
                #{datachangeLasttime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.ctrip.zeus.dao.entity.SlbGroupServerStatusExample"
            resultType="java.lang.Long">
        select count(*) from slb_group_server_status
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update slb_group_server_status
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.groupId != null">
                group_id = #{record.groupId,jdbcType=BIGINT},
            </if>
            <if test="record.ip != null">
                ip = #{record.ip,jdbcType=VARCHAR},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=INTEGER},
            </if>
            <if test="record.createdTime != null">
                created_time = #{record.createdTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.datachangeLasttime != null">
                DataChange_LastTime = #{record.datachangeLasttime,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update slb_group_server_status
        set id = #{record.id,jdbcType=BIGINT},
        group_id = #{record.groupId,jdbcType=BIGINT},
        ip = #{record.ip,jdbcType=VARCHAR},
        status = #{record.status,jdbcType=INTEGER},
        created_time = #{record.createdTime,jdbcType=TIMESTAMP},
        DataChange_LastTime = #{record.datachangeLasttime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.ctrip.zeus.dao.entity.SlbGroupServerStatus">
        update slb_group_server_status
        <set>
            <if test="groupId != null">
                group_id = #{groupId,jdbcType=BIGINT},
            </if>
            <if test="ip != null">
                ip = #{ip,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="createdTime != null">
                created_time = #{createdTime,jdbcType=TIMESTAMP},
            </if>
            <if test="datachangeLasttime != null">
                DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.ctrip.zeus.dao.entity.SlbGroupServerStatus">
    update slb_group_server_status
    set group_id = #{groupId,jdbcType=BIGINT},
      ip = #{ip,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <select id="selectOneByExample" parameterType="com.ctrip.zeus.dao.entity.SlbGroupServerStatusExample"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from slb_group_server_status
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        limit 1
    </select>
    <select id="selectOneByExampleSelective" parameterType="map" resultMap="BaseResultMap">
        select
        <choose>
            <when test="selective != null and selective.length > 0">
                <foreach collection="selective" item="column" separator=",">
                    ${column.aliasedEscapedColumnName}
                </foreach>
            </when>
            <otherwise>
                <include refid="Base_Column_List"/>
            </otherwise>
        </choose>
        from slb_group_server_status
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
        <if test="example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
        limit 1
    </select>
    <insert id="upsertSelective" keyColumn="id" keyProperty="id"
            parameterType="com.ctrip.zeus.dao.entity.SlbGroupServerStatus" useGeneratedKeys="true">
        insert into slb_group_server_status
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="groupId != null">
                group_id,
            </if>
            <if test="ip != null">
                ip,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="createdTime != null">
                created_time,
            </if>
            <if test="datachangeLasttime != null">
                DataChange_LastTime,
            </if>
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="groupId != null">
                #{groupId,jdbcType=BIGINT},
            </if>
            <if test="ip != null">
                #{ip,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="createdTime != null">
                #{createdTime,jdbcType=TIMESTAMP},
            </if>
            <if test="datachangeLasttime != null">
                #{datachangeLasttime,jdbcType=TIMESTAMP},
            </if>
        </trim>
        on duplicate key update
        <trim suffixOverrides=",">
            <if test="id != null">
                id = #{id,jdbcType=BIGINT},
            </if>
            <if test="groupId != null">
                group_id = #{groupId,jdbcType=BIGINT},
            </if>
            <if test="ip != null">
                ip = #{ip,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="createdTime != null">
                created_time = #{createdTime,jdbcType=TIMESTAMP},
            </if>
            <if test="datachangeLasttime != null">
                DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <insert id="upsert" keyColumn="id" keyProperty="id" parameterType="com.ctrip.zeus.dao.entity.SlbGroupServerStatus"
            useGeneratedKeys="true">
        insert into slb_group_server_status
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            group_id,
            ip,
            status,
            created_time,
            DataChange_LastTime,
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            #{groupId,jdbcType=BIGINT},
            #{ip,jdbcType=VARCHAR},
            #{status,jdbcType=INTEGER},
            #{createdTime,jdbcType=TIMESTAMP},
            #{datachangeLasttime,jdbcType=TIMESTAMP},
        </trim>
        on duplicate key update
        <trim suffixOverrides=",">
            <if test="id != null">
                id = #{id,jdbcType=BIGINT},
            </if>
            group_id = #{groupId,jdbcType=BIGINT},
            ip = #{ip,jdbcType=VARCHAR},
            status = #{status,jdbcType=INTEGER},
            created_time = #{createdTime,jdbcType=TIMESTAMP},
            DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
        </trim>
    </insert>


    <!--Self defined-->
    <insert id="updateStatus" keyColumn="id" parameterType="map">
    insert into slb_group_server_status (group_id,
    ip,
    status,
    created_time)
    values (#{record.groupId},
    #{record.ip},
    #{record.status},
    #{record.createdTime})
    on duplicate key update
    status =status &amp; #{reset} | #{record.status}
  </insert>

    <insert id="batchUpdateStatus" keyColumn="id" keyProperty="id" parameterType="list"
            useGeneratedKeys="true">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            insert into slb_group_server_status (group_id,
            ip,
            status,
            created_time)
            values (#{item.status.groupId}, #{item.status.ip}, #{item.status.status}, #{item.status.createdTime})
            on duplicate key update
            status = status &amp; #{item.reset} | #{item.status.status}
        </foreach>
    </insert>

    <insert id="insertUpdate" keyColumn="id" keyProperty="id" parameterType="com.ctrip.zeus.dao.entity.SlbGroupServerStatus"
            useGeneratedKeys="true">
        insert into slb_group_server_status
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            group_id,
            ip,
            status,
            created_time,
            DataChange_LastTime,
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            #{groupId,jdbcType=BIGINT},
            #{ip,jdbcType=VARCHAR},
            #{status,jdbcType=INTEGER},
            #{createdTime,jdbcType=TIMESTAMP},
            #{datachangeLasttime,jdbcType=TIMESTAMP},
        </trim>
        on duplicate key update
        <trim suffixOverrides=",">
            <if test="id != null">
                id = #{id,jdbcType=BIGINT},
            </if>
            DataChange_LastTime = #{datachangeLasttime,jdbcType=TIMESTAMP},
        </trim>
    </insert>

    <insert id="batchInsertIncludeId" parameterType="list">
        insert into slb_group_server_status (`id`,group_id, ip, status,
        created_time, DataChange_LastTime)

        <trim prefix="values ">
            <foreach collection="list" item="item" separator=",">
                (#{item.id,jdbcType=BIGINT},
                #{item.groupId,jdbcType=BIGINT},
                #{item.ip,jdbcType=VARCHAR},
                #{item.status,jdbcType=INTEGER},
                #{item.createdTime,jdbcType=TIMESTAMP},
                #{item.datachangeLasttime,jdbcType=TIMESTAMP})
            </foreach>
        </trim>
    </insert>

    <select id="concatSelect" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from slb_group_server_status

        WHERE CONCAT(group_id, ',', ip) in
        <foreach close=")" collection="concats" item="item" open="("
                 separator=",">
            #{item}
        </foreach>
    </select>
    <!--Self defined-->
</mapper>