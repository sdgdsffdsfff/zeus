server {
    listen 443;
    server_name  ws.security.pay.uat.qa.nt.ctripcorp.com;
    ignore_invalid_headers off;
    proxy_http_version 1.1;
    ssl on;
    ssl_certificate /data/nginx/ssl/632/ssl.crt;
    ssl_certificate_key /data/nginx/ssl/632/ssl.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    location ~* ^/do_not_delete/noc.gif$ {
        add_header Accept-Ranges bytes;
        content_by_lua '
        local res = ngx.decode_base64("R0lGODlhEAAQAJEBAABVmZmqzMz///+AMyH5BAEAAAEALAAAAAAQABAAAAI0jI+pAd1rnHzJKRpxBmHky3nDoDHUOEpb2HUcxR3i+DEy2kY6gnpfbJhVXgnfcAJBlJLLAgA7");
        ngx.print(res);
        return ngx.exit(200);';
    }
    req_status proxy_zone;
    location ~*/api-webapp {
        proxy_request_buffering off;
        proxy_next_upstream off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Connection "";
        proxy_read_timeout 180s;
        if ($remote_addr ~* "172\..*|192\.168.*|10\..*") {
            set $inWhite "true";
        }
        rewrite_by_lua '
          local headers = ngx.req.get_headers();
          if ngx.var.inWhite ~= "true" or headers["X-Forwarded-For"] == nil then
            if (headers["True-Client-Ip"] ~= nil) then
              ngx.req.set_header("X-Forwarded-For", headers["True-Client-IP"])
            else
              ngx.req.set_header("X-Forwarded-For", ngx.var.remote_addr )
          end
        end';
        set $upstream backend_331;
        set $upstream_name backend_331;
        if ($remote_addr ~* "10.32.*") {
            set $upstream $cookie_bastion;
        }
        if ($upstream = "") {
            set $upstream backend_331;
        }
        if ($upstream != backend_331) {
            add_header Bastion $cookie_bastion;
        }
        proxy_pass https://$upstream;
    }
    location ~*/api-merchant {
        proxy_request_buffering off;
        proxy_next_upstream off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Connection "";
        proxy_read_timeout 180s;
        if ($remote_addr ~* "172\..*|192\.168.*|10\..*") {
            set $inWhite "true";
        }
        rewrite_by_lua '
          local headers = ngx.req.get_headers();
          if ngx.var.inWhite ~= "true" or headers["X-Forwarded-For"] == nil then
            if (headers["True-Client-Ip"] ~= nil) then
              ngx.req.set_header("X-Forwarded-For", headers["True-Client-IP"])
            else
              ngx.req.set_header("X-Forwarded-For", ngx.var.remote_addr )
          end
        end';
        set $upstream backend_332;
        set $upstream_name backend_332;
        if ($remote_addr ~* "10.32.*") {
            set $upstream $cookie_bastion;
        }
        if ($upstream = "") {
            set $upstream backend_332;
        }
        if ($upstream != backend_332) {
            add_header Bastion $cookie_bastion;
        }
        proxy_pass https://$upstream;
    }
    location ~*/api-web {
        proxy_request_buffering off;
        proxy_next_upstream off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Connection "";
        proxy_read_timeout 180s;
        if ($remote_addr ~* "172\..*|192\.168.*|10\..*") {
            set $inWhite "true";
        }
        rewrite_by_lua '
          local headers = ngx.req.get_headers();
          if ngx.var.inWhite ~= "true" or headers["X-Forwarded-For"] == nil then
            if (headers["True-Client-Ip"] ~= nil) then
              ngx.req.set_header("X-Forwarded-For", headers["True-Client-IP"])
            else
              ngx.req.set_header("X-Forwarded-For", ngx.var.remote_addr )
          end
        end';
        set $upstream backend_333;
        set $upstream_name backend_333;
        if ($remote_addr ~* "10.32.*") {
            set $upstream $cookie_bastion;
        }
        if ($upstream = "") {
            set $upstream backend_333;
        }
        if ($upstream != backend_333) {
            add_header Bastion $cookie_bastion;
        }
        proxy_pass https://$upstream;
    }
}
